# Listing of Parameters
# ---------------------
subsection Distributed Lagrange<1,2>
  set Adjust grids                                       = true
  set Apply space refinements steps near embedded domain = true
  set Coupling strategy                                  = exact
  set Embedded configuration finite element degree       = 1
  set Embedded post refinement cycles                    = 0
  set Finite element embedded degree                     = 0
  set Finite element space degree                        = 1
  
  set Number of embedded initial refinement cycles       = 3
  set Number of refinement cycles                        = 5
  set Number of space initial refinement cycles          = 4
  set Space pre refinements cycles                       = 2
  set Use embedded refinement                            = false
  set Use space refinement                               = false


  subsection Boundary condition
    # Sometimes it is convenient to use symbolic constants in the expression
    # that describes the function, rather than having to use its numeric value
    # everywhere the constant appears. These values can be defined using this
    # parameter, in the form `var1=value1, var2=value2, ...'.
    # 
    # A typical example would be to set this runtime parameter to
    # `pi=3.1415926536' and then use `pi' in the expression of the actual
    # formula. (That said, for convenience this class actually defines both
    # `pi' and `Pi' by default, but you get the idea.)
    set Function constants  = Cx=.5, Cy=.5, r=.1, w=12

    # The formula that denotes the function you want to evaluate for
    # particular values of the independent variables. This expression may
    # contain any of the usual operations such as addition or multiplication,
    # as well as all of the common functions such as `sin' or `cos'. In
    # addition, it may contain expressions like `if(x>0, 1, -1)' where the
    # expression evaluates to the second argument if the first argument is
    # true, and to the third argument otherwise. For a full overview of
    # possible expressions accepted see the documentation of the muparser
    # library at http://muparser.beltoforion.de/.
    # 
    # If the function you are describing represents a vector-valued function
    # with multiple components, then separate the expressions for individual
    # components by a semicolon.
    # set Function expression = sin(2*pi*x)*sin(2*pi*y)
    set Function expression = -ln(sqrt((x-Cx)^2 + (y-Cy)^2))

    # The names of the variables as they will be used in the function,
    # separated by commas. By default, the names of variables at which the
    # function will be evaluated are `x' (in 1d), `x,y' (in 2d) or `x,y,z' (in
    # 3d) for spatial coordinates and `t' for time. You can then use these
    # variable names in your function expression and they will be replaced by
    # the values of these variables at which the function is currently
    # evaluated. However, you can also choose a different set of names for the
    # independent variables at which to evaluate your function expression. For
    # example, if you work in spherical coordinates, you may wish to set this
    # input parameter to `r,phi,theta,t' and then use these variable names in
    # your function expression.
    set Variable names      = x,y,t
  end

  subsection Immersed configuration
    set Function constants  = R=.3, Cx=.5, Cy=.5
    set Function expression = R*cos(2*pi*x)+Cx; R*sin(2*pi*x)+Cy
    set Variable names      = x,y,t
    # # Sometimes it is convenient to use symbolic constants in the expression
    # # that describes the function, rather than having to use its numeric value
    # # everywhere the constant appears. These values can be defined using this
    # # parameter, in the form `var1=value1, var2=value2, ...'.
    # # 
    # # A typical example would be to set this runtime parameter to
    # # `pi=3.1415926536' and then use `pi' in the expression of the actual
    # # formula. (That said, for convenience this class actually defines both
    # # `pi' and `Pi' by default, but you get the idea.)
    # set Function constants  = R=.3, Cx=.4, Cy=.4                 # default: 

    # # The formula that denotes the function you want to evaluate for
    # # particular values of the independent variables. This expression may
    # # contain any of the usual operations such as addition or multiplication,
    # # as well as all of the common functions such as `sin' or `cos'. In
    # # addition, it may contain expressions like `if(x>0, 1, -1)' where the
    # # expression evaluates to the second argument if the first argument is
    # # true, and to the third argument otherwise. For a full overview of
    # # possible expressions accepted see the documentation of the muparser
    # # library at http://muparser.beltoforion.de/.
    # # 
    # # If the function you are describing represents a vector-valued function
    # # with multiple components, then separate the expressions for individual
    # # components by a semicolon.
    # set Function expression = R*cos(2*pi*x)+Cx; R*sin(2*pi*x)+Cy # default: 0

    # # The names of the variables as they will be used in the function,
    # # separated by commas. By default, the names of variables at which the
    # # function will be evaluated are `x' (in 1d), `x,y' (in 2d) or `x,y,z' (in
    # # 3d) for spatial coordinates and `t' for time. You can then use these
    # # variable names in your function expression and they will be replaced by
    # # the values of these variables at which the function is currently
    # # evaluated. However, you can also choose a different set of names for the
    # # independent variables at which to evaluate your function expression. For
    # # example, if you work in spherical coordinates, you may wish to set this
    # # input parameter to `r,phi,theta,t' and then use these variable names in
    # # your function expression.
    # set Variable names      = x,y,t
  end

  subsection Right hand side
    # Sometimes it is convenient to use symbolic constants in the expression
    # that describes the function, rather than having to use its numeric value
    # everywhere the constant appears. These values can be defined using this
    # parameter, in the form `var1=value1, var2=value2, ...'.
    # 
    # A typical example would be to set this runtime parameter to
    # `pi=3.1415926536' and then use `pi' in the expression of the actual
    # formula. (That said, for convenience this class actually defines both
    # `pi' and `Pi' by default, but you get the idea.)
    set Function constants  = 

    # The formula that denotes the function you want to evaluate for
    # particular values of the independent variables. This expression may
    # contain any of the usual operations such as addition or multiplication,
    # as well as all of the common functions such as `sin' or `cos'. In
    # addition, it may contain expressions like `if(x>0, 1, -1)' where the
    # expression evaluates to the second argument if the first argument is
    # true, and to the third argument otherwise. For a full overview of
    # possible expressions accepted see the documentation of the muparser
    # library at http://muparser.beltoforion.de/.
    # 
    # If the function you are describing represents a vector-valued function
    # with multiple components, then separate the expressions for individual
    # components by a semicolon.
    # set Function expression = 8*pi^2*sin(2*pi*x)*sin(2*pi*y)
    set Function expression = 0.

    # The names of the variables as they will be used in the function,
    # separated by commas. By default, the names of variables at which the
    # function will be evaluated are `x' (in 1d), `x,y' (in 2d) or `x,y,z' (in
    # 3d) for spatial coordinates and `t' for time. You can then use these
    # variable names in your function expression and they will be replaced by
    # the values of these variables at which the function is currently
    # evaluated. However, you can also choose a different set of names for the
    # independent variables at which to evaluate your function expression. For
    # example, if you work in spherical coordinates, you may wish to set this
    # input parameter to `r,phi,theta,t' and then use these variable names in
    # your function expression.
    set Variable names      = x,y,t
  end

  subsection Solution
    # Sometimes it is convenient to use symbolic constants in the expression
    # that describes the function, rather than having to use its numeric value
    # everywhere the constant appears. These values can be defined using this
    # parameter, in the form `var1=value1, var2=value2, ...'.
    # 
    # A typical example would be to set this runtime parameter to
    # `pi=3.1415926536' and then use `pi' in the expression of the actual
    # formula. (That said, for convenience this class actually defines both
    # `pi' and `Pi' by default, but you get the idea.)
    set Function constants  = R=.3, Cx=.5, Cy=.5, r=.1, w=12

    # The formula that denotes the function you want to evaluate for
    # particular values of the independent variables. This expression may
    # contain any of the usual operations such as addition or multiplication,
    # as well as all of the common functions such as `sin' or `cos'. In
    # addition, it may contain expressions like `if(x>0, 1, -1)' where the
    # expression evaluates to the second argument if the first argument is
    # true, and to the third argument otherwise. For a full overview of
    # possible expressions accepted see the documentation of the muparser
    # library at http://muparser.beltoforion.de/.
    # 
    # If the function you are describing represents a vector-valued function
    # with multiple components, then separate the expressions for individual
    # components by a semicolon.
    set Function expression = sqrt((x-Cx)^2 + (y-Cy)^2) <= R ? -ln(R) : -ln(sqrt((x-Cx)^2 + (y-Cy)^2)) 
    # set Function expression = sin(2*pi*x)*sin(2*pi*y)     # default: 0

    # The names of the variables as they will be used in the function,
    # separated by commas. By default, the names of variables at which the
    # function will be evaluated are `x' (in 1d), `x,y' (in 2d) or `x,y,z' (in
    # 3d) for spatial coordinates and `t' for time. You can then use these
    # variable names in your function expression and they will be replaced by
    # the values of these variables at which the function is currently
    # evaluated. However, you can also choose a different set of names for the
    # independent variables at which to evaluate your function expression. For
    # example, if you work in spherical coordinates, you may wish to set this
    # input parameter to `r,phi,theta,t' and then use these variable names in
    # your function expression.
    set Variable names      = x,y,t
  end

  subsection Solution multiplier
    # Sometimes it is convenient to use symbolic constants in the expression
    # that describes the function, rather than having to use its numeric value
    # everywhere the constant appears. These values can be defined using this
    # parameter, in the form `var1=value1, var2=value2, ...'.
    # 
    # A typical example would be to set this runtime parameter to
    # `pi=3.1415926536' and then use `pi' in the expression of the actual
    # formula. (That said, for convenience this class actually defines both
    # `pi' and `Pi' by default, but you get the idea.)
    set Function constants  = R=.3, Cx=.5, Cy=.5, r=.1, w=12

    # The formula that denotes the function you want to evaluate for
    # particular values of the independent variables. This expression may
    # contain any of the usual operations such as addition or multiplication,
    # as well as all of the common functions such as `sin' or `cos'. In
    # addition, it may contain expressions like `if(x>0, 1, -1)' where the
    # expression evaluates to the second argument if the first argument is
    # true, and to the third argument otherwise. For a full overview of
    # possible expressions accepted see the documentation of the muparser
    # library at http://muparser.beltoforion.de/.
    # 
    # If the function you are describing represents a vector-valued function
    # with multiple components, then separate the expressions for individual
    # components by a semicolon.
    # set Function expression = 0.
    set Function expression = -1./R

    # The names of the variables as they will be used in the function,
    # separated by commas. By default, the names of variables at which the
    # function will be evaluated are `x' (in 1d), `x,y' (in 2d) or `x,y,z' (in
    # 3d) for spatial coordinates and `t' for time. You can then use these
    # variable names in your function expression and they will be replaced by
    # the values of these variables at which the function is currently
    # evaluated. However, you can also choose a different set of names for the
    # independent variables at which to evaluate your function expression. For
    # example, if you work in spherical coordinates, you may wish to set this
    # input parameter to `r,phi,theta,t' and then use these variable names in
    # your function expression.
    set Variable names      = x,y,t
  end

end


